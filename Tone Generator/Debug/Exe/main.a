;/*******************************************************
; This program was created by the
; CodeWizardAVR V3.12 Advanced
; Automatic Program Generator
; © Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
; http://www.hpinfotech.com
;
; Project :
; Version :
; Date    : 04/11/2019
; Author  :
; Company :
; Comments:
;
;
; Chip type               : ATmega162
; Program type            : Application
; AVR Core Clock frequency: 12,000000 MHz
; Memory model            : Small
; External RAM size       : 0
; Data Stack size         : 256
; *******************************************************/
;
;#include <mega162.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;  #include <delay.h>
;  // Declare your global variables here
;
;  #define DATA_REGISTER_EMPTY (1<<UDRE0)
;  #define RX_COMPLETE (1<<RXC0)
;  #define FRAMING_ERROR (1<<FE0)
;  #define PARITY_ERROR (1<<UPE0)
;  #define DATA_OVERRUN (1<<DOR0)
;
;  //Bunyi nada : do re mi fa sol la si do
;  //Frekuensi : 264 297 330 352 396 440 495 528 hz
;  #define doFreq 262
;  #define reFreq 294
;  #define miFreq 330
;  #define faFreq 350
;  #define solFreq 392
;  #define laFreq 440
;  #define siFreq 494
;  #define DoFreq 528
;
;  #ifndef RXB8
;  #define RXB8 1
;  #endif
;
;  #ifndef TXB8
;  #define TXB8 0
;  #endif
;
;  #ifndef UPE
;  #define UPE 2
;  #endif
;
;  #ifndef DOR
;  #define DOR 3
;  #endif
;
;  #ifndef FE
;  #define FE 4
;  #endif
;
;  #ifndef UDRE
;  #define UDRE 5
;  #endif
;
;  #ifndef RXC
;  #define RXC 7
;  #endif
;
;  char flag, nada, flagSerial;
;int count, i;
;void putchar1(char c);
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 8
;  char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;  unsigned char rx_wr_index1=0, rx_rd_index1=0;
;#else
;  unsigned int rx_wr_index1=0, rx_rd_index1=0;
;#endif
;
;  #if RX_BUFFER_SIZE1 < 256
;  unsigned char rx_counter1=0;
;#else
;  unsigned int rx_counter1=0;
;#endif
;
;  // This flag is set on USART1 Receiver buffer overflow
;  bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 0062 {

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0000 0063   char status, data;
; 0000 0064   status=UCSR1A;
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0065   data=UDR1;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0066   nada=UDR1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0067   if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0068   {
; 0000 0069     //   rx_buffer1[rx_wr_index1++]=data;
; 0000 006A 
; 0000 006B     //#if RX_BUFFER_SIZE1 == 256
; 0000 006C     //   // special case for receiver buffer size=256
; 0000 006D     //   if (++rx_counter1 == 0) rx_buffer_overflow1=1;
; 0000 006E     //#else
; 0000 006F     //   if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
; 0000 0070     //   if (++rx_counter1 == RX_BUFFER_SIZE1)
; 0000 0071     //      {
; 0000 0072     //      rx_counter1=0;
; 0000 0073     //      rx_buffer_overflow1=1;
; 0000 0074     //      }
; 0000 0075     //#endif
; 0000 0076     /*--------------------*/
; 0000 0077     if (data=='#')
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0078     {
; 0000 0079       flagSerial=1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 007A       count=0;
;PCODE: $00000019 VOL: 0
; 0000 007B     } else {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 007C       rx_buffer1[count]=data;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 007D       count++;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 007E     }
;PCODE: $00000022 VOL: 0
; 0000 007F 
; 0000 0080     if (data=='!'&&flagSerial==1) {//Input data
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0081       flagSerial=0;
;PCODE: $0000002D VOL: 0
; 0000 0082       flag=rx_buffer1[0];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0083       nada=rx_buffer1[1];
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0084     }
; 0000 0085   }
;PCODE: $00000033 VOL: 0
; 0000 0086 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;  char getchar1(void)
; 0000 008B {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 008C   char data;
; 0000 008D   while (rx_counter1==0);
;PCODE: $0000003B VOL: 0
;	data -> R17
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 008E   data=rx_buffer1[rx_rd_index1++];
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 008F   #if RX_BUFFER_SIZE1 != 256
; 0000 0090     if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0091   #endif
; 0000 0092     #asm("cli")
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
	cli
;PCODE: $0000004C VOL: 0
; 0000 0093     --rx_counter1;
;PCODE: $0000004D VOL: 0
; 0000 0094   #asm("sei")
;PCODE: $0000004E VOL: 0
	sei
;PCODE: $0000004F VOL: 0
; 0000 0095     return data;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0096 }
;PCODE: $00000053 VOL: 0
;#pragma used-
;  // Write a character to the USART1 Transmitter
;  #pragma used+
;  void putchar1(char c)
; 0000 009B {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 009C   while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000056 VOL: 0
;	c -> Y+0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 009D   UDR1=c;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009E }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;#pragma used-
;  void delay_tone(char tone)
; 0000 00A1 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00A2   //Rumus delay = (1/freq )*1000000/2;
; 0000 00A3   switch(tone)
;PCODE: $00000064 VOL: 0
;	tone -> Y+0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A4   {
; 0000 00A5   case 1 :
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A6     {
; 0000 00A7       delay_us(1893);
;PCODE: $00000069 VOL: 0
; 0000 00A8       break;
;PCODE: $0000006A VOL: 0
; 0000 00A9     }
; 0000 00AA   case 2 :
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00AB     {
; 0000 00AC       delay_us(1683);
;PCODE: $0000006E VOL: 0
; 0000 00AD       break;
;PCODE: $0000006F VOL: 0
; 0000 00AE     }
; 0000 00AF   case 3 :
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B0     {
; 0000 00B1       delay_us(1515);
;PCODE: $00000073 VOL: 0
; 0000 00B2       break;
;PCODE: $00000074 VOL: 0
; 0000 00B3     }
; 0000 00B4   case 4 :
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00B5     {
; 0000 00B6       delay_us(1420);
;PCODE: $00000078 VOL: 0
; 0000 00B7       break;
;PCODE: $00000079 VOL: 0
; 0000 00B8     }
; 0000 00B9   case 5 :
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BA     {
; 0000 00BB       delay_us(1262);
;PCODE: $0000007D VOL: 0
; 0000 00BC       break;
;PCODE: $0000007E VOL: 0
; 0000 00BD     }
; 0000 00BE   case 6 :
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00BF     {
; 0000 00C0       delay_us(1136);
;PCODE: $00000082 VOL: 0
; 0000 00C1       break;
;PCODE: $00000083 VOL: 0
; 0000 00C2     }
; 0000 00C3   case 7 :
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C4     {
; 0000 00C5       delay_us(1010);
;PCODE: $00000087 VOL: 0
; 0000 00C6       break;
;PCODE: $00000088 VOL: 0
; 0000 00C7     }
; 0000 00C8   case 8 :
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C9     {
; 0000 00CA       delay_us(946);
;PCODE: $0000008C VOL: 0
; 0000 00CB       break;
;PCODE: $0000008D VOL: 0
; 0000 00CC     }
; 0000 00CD   case 88:
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00CE     {
; 0000 00CF       delay_us(800);
;PCODE: $00000091 VOL: 0
; 0000 00D0       break;
;PCODE: $00000092 VOL: 0
; 0000 00D1     }
; 0000 00D2   }
;PCODE: $00000093 VOL: 0
; 0000 00D3 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;
;void toneGenerator(char tone)
; 0000 00D7 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D8   if (tone!=88)
;PCODE: $00000099 VOL: 0
;	tone -> Y+0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D9   {
; 0000 00DA     PORTB.0 =1;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00DB     delay_tone(tone);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DC     PORTB.0 =0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00DD     delay_tone(tone);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00DE   } else {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DF     PORTB.0 = 0;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E0     delay_tone(tone);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E1   }
;PCODE: $000000AB VOL: 0
; 0000 00E2 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;
;int Dur;
;void musicGenerator(char duration, char tone)
; 0000 00E7 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E8   for (Dur=0; Dur<=duration; Dur++)
;PCODE: $000000B1 VOL: 0
;	duration -> Y+1
;	tone -> Y+0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E9     toneGenerator(tone);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00EB PORTB.0=0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00EC }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;
;int gundulPacul[] = {1, 3, 1, 3, 4, 5, 5, 0, 7, 8, 7, 8, 7, 5, 88, 0, 1,
;  3, 1, 3, 4, 5, 5, 0, 7, 8, 7, 8, 7, 5, 88, 1,
;  3, 5, 88, 4, 4, 5, 4, 3, 1, 4, 3, 1, 88, 0, 1,
;  3, 5, 88, 4, 4, 5, 4, 3, 1, 4, 3, 1, 88, 0,
;  99};

	.DSEG
;int Twinkle[]={
;  1, 1, 5, 5, 6, 6, 5, 88,
;  4, 4, 3, 3, 2, 2, 1, 88,
;  5, 5, 4, 4, 3, 3, 2, 88,
;  5, 5, 4, 4, 3, 3, 2, 88,
;  1, 1, 5, 5, 6, 6, 5, 88,
;  4, 4, 3, 3, 2, 2, 1, 88,
;  99
;};
;
;int ibuKitakartini[]={
;  1, 2, 3, 4, 5, 3, 1, 88,
;  6, 8, 7, 6, 5, 88,
;  4, 6, 5, 4, 3, 1, 88,
;  2, 4, 3, 2, 1, 88,
;  4, 3, 4, 6, 5, 6, 5, 3, 1, 3, 2, 3, 4, 5, 3, 88,
;  4, 3, 4, 6, 5, 6, 5, 3, 1, 3, 2, 3, 4, 5, 3, 88, 99
;} ;
;
;int babyShark[]={
;  2, 3, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88,
;  2, 3, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88,
;  2, 3, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88, 5, 88,
;  5, 88, 5, 88, 4, 99
;};
;
;int randomMusic[] =
;  {1, 2, 3, 4, 5, 6, 7, 8, 88, 99};
;
;int index=0;
;void musicPlayer(int music[])
; 0000 0113 {

	.CSEG
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0114   while (music[index]!=99)
;PCODE: $000000CF VOL: 0
;	music -> Y+0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0115   {
; 0000 0116     musicGenerator(70, music[index]);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0117     index++;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0118   }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0119 
; 0000 011A   index=0;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 011B   flag=0;
;PCODE: $000000E8 VOL: 0
; 0000 011C }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;
;int i;
;
;void main(void)
; 0000 0121 {
;PCODE: $000000EC VOL: 0
; 0000 0122   // Declare your local variables here
; 0000 0123 
; 0000 0124   // Crystal Oscillator division factor: 1
; 0000 0125   #pragma optsize-
; 0000 0126     CLKPR=(1<<CLKPCE);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0127   CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0128   #ifdef _OPTIMIZE_SIZE_
; 0000 0129     #pragma optsize+
; 0000 012A     #endif
; 0000 012B 
; 0000 012C     // Input/Output Ports initialization
; 0000 012D     // Port A initialization
; 0000 012E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 012F     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0130   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0131   PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0132 
; 0000 0133   // Port B initialization
; 0000 0134   // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0135   DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0136   // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0137   PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0138 
; 0000 0139   // Port C initialization
; 0000 013A   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 013B   DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 013C   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 013D   PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 013E 
; 0000 013F   // Port D initialization
; 0000 0140   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0141   DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0142   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0143   PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0144 
; 0000 0145   // Port E initialization
; 0000 0146   // Function: Bit2=In Bit1=In Bit0=In
; 0000 0147   DDRE=(0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0148   // State: Bit2=T Bit1=T Bit0=T
; 0000 0149   PORTE=(0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 014A 
; 0000 014B   // USART1 initialization
; 0000 014C   // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014D   // USART1 Receiver: On
; 0000 014E   // USART1 Transmitter: On
; 0000 014F   // USART1 Mode: Asynchronous
; 0000 0150   // USART1 Baud Rate: 9600
; 0000 0151   UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0152   UCSR1B=(1<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0153   UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0154   UBRR1H=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0155   UBRR1L=0x4D;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0156 
; 0000 0157   // Global enable interrupts
; 0000 0158   #asm("sei")
;PCODE: $0000010F VOL: 0
	sei
;PCODE: $00000110 VOL: 0
; 0000 0159 
; 0000 015A     while (1)
;PCODE: $00000111 VOL: 0
; 0000 015B   {
; 0000 015C     // Place your code here
; 0000 015D     //char a = 'a';
; 0000 015E     //putchar1(nada);
; 0000 015F     //delay_ms(100);
; 0000 0160     //musicPlayer(randomMusic);
; 0000 0161     //flag = 1;
; 0000 0162     putchar1(nada);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0163 
; 0000 0164     if (flag=='1') {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0165       if (nada=='1') {
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0166         musicPlayer(gundulPacul);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0167       } else if (nada=='2') {
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0168         musicPlayer(Twinkle);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0169       } else if (nada=='3') {
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 016A         musicPlayer(ibuKitakartini);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 016B       } else if (nada=='4') {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 016C         musicPlayer(babyShark);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 016D       }
; 0000 016E     } else if (flag=='2') {
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 016F       if (nada=='1') {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0170         toneGenerator(1);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0171       } else if (nada=='2') {
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0172         toneGenerator(2);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0173       } else if (nada=='3') {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0174         toneGenerator(3);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0175       } else if (nada=='4') {
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0176         toneGenerator(4);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0177       } else if (nada=='5') {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0178         toneGenerator(5);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0179       } else if (nada=='6') {
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 017A         toneGenerator(6);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 017B       } else if (nada=='7') {
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 017C         toneGenerator(7);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 017D       } else if (nada=='8') {
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 017E         toneGenerator(8);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 017F       } else if (nada=='9') {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0180         toneGenerator(99);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0181       }
; 0000 0182     }
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0183   }
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0184 }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
